package sysdig

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func dataSourceSysdigSecureVulnerabilityExceptionLists() *schema.Resource {
	timeout := 30 * time.Second

	return &schema.Resource{
		ReadContext: dataSourceSysdigSecureVulnerabilityExceptionListsRead,

		Timeouts: &schema.ResourceTimeout{
			Read: schema.DefaultTimeout(timeout),
		},

		Schema: map[string]*schema.Schema{
			"list": {
				Computed: true,
				Type:     schema.TypeMap,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

// Retrieves the information of a resource form the file and loads it in Terraform
func dataSourceSysdigSecureVulnerabilityExceptionListsRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := meta.(SysdigClients).sysdigSecureClient()
	if err != nil {
		return diag.FromErr(err)
	}

	nc, err := client.GetVulnerabilityExceptionLists(ctx)
	if err != nil {
		return diag.FromErr(err)
	}

	result := make(map[string]string)
	for _, list := range nc {
		if _, found := result[list.Name]; found {
			return diag.Errorf("duplicate %s found in list", list.Name)
		}
		result[list.Name] = list.ID
	}

	d.SetId("default")
	d.Set("list", result)

	return nil
}
